# Introduction

Simulation and optimization approaches are present in our everyday lives, albeit most of the time operating in a background plane. For example, 
when navigating with a GPS, the system simulates different routes and optimizes for the shortest or fastest path. 
Similarly, supply chains use optimization algorithms to minimize costs and maximize efficiency, while simulations help predict demand and manage 
inventory. These techniques are fundamental tools in decision-making processes across various industries, from transportation and logistics to finance and healthcare.

But what do simulation and optimization approaches have in common, apart from being complementary tools? The answer lies in the concept of a *model*. In the context
of machine learning, we normally refer to a model as a mathematical or computational representation that captures the relationships between input data and output predictions. 
In simulation and optimization, a model similarly serves as an abstraction of a real-world system or process, allowing us to analyze, predict, and improve its behavior 
through experimentation and algorithmic techniques.

In the following, we will delve deeper into the concept of a model and how models are used in simulation and optimization contexts using some practical examples.

## Simulating supermarket dynamics

Imagine you are in your favourite grocery store waiting at the checkout queue. For simplicity, let's assume there is only one open counter. When you arrive at the queue, there might be other customers already 
waiting, while the first customer at the queue is currently being served. Shortly after you, a new customer arrives, taking the next free spot right 
behind you. And then another customer arrives, and another one, and another one... 

Let's try to break down how this system behaves and what are the most important interactions between the parts of the system. In general, 
we will distinguish between *components*, *states*, *events*, *inputs* and *metrics*. 

- **Components:** These are the entities that interact with each other. In our example, we have customers, cashiers and the queue itself.
- **States:** The configurations of the system that represent valid combinations of specific properties of the components at a given moment 
of time. For instance, at each time the queue has a specific length: zero if it's empty, one customer, two customers, etc. Additionally, the cashier 
can be busy or idle. We can also count the number of customers currently present in the supermarket which have not yet arrive at the checkout queue.
- **Events:** The interactions themselves, like a new customer arriving at the queue, checkout start or checkout completion.
- **Inputs:** Whatever information is fed into the system, e.g. arrival times, service times, etc. These inputs can contain statistical assumptions, like
the distribution of arrival times.
- **Metrics:** How we evaluate the system as a whole in a given time step. For instance, what is the average waiting time? How much time are the cashiers busy?
How is the queue length distributed? 

The system could be represented by the following Python code as a minimal variant. 

```python
import heapq, random

# event = (time, type, customer_id)
event_list = []
heapq.heappush(event_list, (first_arrival_time, 'arrival', 1))

while event_list and time < sim_end:
    time, ev_type, cid = heapq.heappop(event_list)
    if ev_type == 'arrival':
        if any_cashier_free():
            start_checkout(cid, time)
            heapq.heappush(event_list, (time + service_time(cid), 'departure', cid))
        else:
            enqueue(cid, time)
        heapq.heappush(event_list, (time + next_interarrival(), 'arrival', next_id()))
    elif ev_type == 'departure':
        finish_service(cid, time)
        if queue_not_empty():
            next_cid = dequeue()
            start_service(next_cid, time)
            heapq.heappush(event_list, (time + service_time(next_cid), 'departure', next_cid))
```

This code assumes that customers arrive at regular subsequent intervals after each arrival event. The parameter ``sim_end`` defines 
how long (how many steps) we want to simulate in this case. The function ``service_time`` returns the time the cashier needs 
for checking out customer ``cid``. The next customer will arrive after a time given by the function ``next_interarrival``, which 
can implement different stochastic behaviours.

We can represent this system graphically as shown in the following illustration:

![](figures/fig_intro_1)

In this figure, customers are denoted by $r_i$, the amount of cashiers is $c$ and the total number 
of customers in the supermarket at time $t$ is denoted by $N(t)$.

Now let's try to refine the dynamics of this system. We will now write some equations to describe the system'
dynamics according to the **infinite waiting room** $M/M/c$ model. Let's make the following assumptions:

- Arrivals follow a Poisson distribution with mean $\lambda$ (arrivals per second), which for this case will be assumed to be stationary.
- The service times are assumed to be exponentially distributed with mean $1/\mu$.

What would be now the *traffic intensity per cashier*? That is, what is the mean customer flow that each cashier 
experiences from their own point of view? Let's call this number $\rho$ and calculate it as follows:

$$
\rho=\frac{\lambda}{c\mu}
$$

In words, if customers arrive at a rate of $\lambda=10$ customers/s and each cashier serves 2 customers/s (yes, it's 
a fast supermarket). With 5 cashiers, that means that $\rho=10/5\times 2=1$. This means that each cashier has 
quite a lot to do right now.

We are now interested in the probabilities of the states in this systems. In this case, we define a system by 
the number of customers currently present in the supermarket. So we can have $N=1$ if there is currently 1 customer 
present, or any other number of customers (we assume the supermarket is so large, we can accomodate any 
number of them). Let's denote these probabilities by $p_n=\operatorname{Pr\{N=n\}}$. We have

$$
p_n=\lim_{t\rightarrow\infty}\int_{0}^t \mathbb{1}_{\{N(s)=n\}} ds
$$

